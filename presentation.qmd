---
title: "Project title"
subtitle: "STA/ISS 313 - Spring 2023 - Project 1"
author: "Team Name"
title-slide-attributes:
  data-background-image: images/watercolour_sys02_img34_teacup-ocean.jpg
  data-background-size: stretch
  data-slide-number: none
format: revealjs
editor: visual
execute:
  echo: false
---

```{r}
#| label: load-packages
#| include: false

# Add any additional packages you need to this chunk
# Remove any packages from this list that you're not using
library(tidyverse)
library(tidymodels)
library(palmerpenguins)
library(gt)
library(tidyr)
library(gghighlight)
library(directlabels)
library(lubridate)
```

```{r}
#| label: setup
#| include: false

# For better figure resolution
knitr::opts_chunk$set(
  fig.retina = 3, 
  dpi = 300, 
  fig.width = 6, 
  fig.asp = 0.618, 
  out.width = "70%"
  )
```

```{r}
#| label: load-data
#| include: false

breed_traits <- read_csv("data/breed_traits.csv") %>%
  select(-Breed)
trait_description <- read_csv("data/trait_description.csv")
breed_rank_all <- read_csv("data/breed_rank.csv")
breed_full <- cbind(breed_rank_all, breed_traits)
```

# Using Quarto for presentations

## Quarto

-   The presentation is created using the Quarto CLI

-   `##` sets the start of a new slide

## Layouts

You can use plain text

-   or bullet points

::: columns
::: {.column width="50%"}
or text in two columns $^*$
:::

::: {.column width="50%"}
-   like
-   this
:::
:::

### 

::: aside
\[\*\] And add footnotes
:::

## Code

```{r}
#| label: boring-regression

# a boring regression
model <- lm(dist ~ speed, data = cars)
tidy(model)
glance(model)
```

## Plots

```{r}
#| label: lollipop-wrangling
#| echo: false
lollipop_data <- breed_full %>%
  filter((`2020 Rank` > 0 & `2020 Rank` <= 10) | (`2020 Rank` > 185 & `2020 Rank` <= 195)) %>%
  select(-`2013 Rank`, -`2014 Rank`, -`2015 Rank`, -`2016 Rank`, -`2017 Rank`, -`2018 Rank`, -`2019 Rank`) %>%
  mutate(popularity = case_when(`2020 Rank` <= 10 ~ "Popular", 
                                `2020 Rank` >= 186 ~ "Unpopular")) %>%
  select(-`2020 Rank`, -links, -Image, -`Coat Type`, -`Coat Length`) %>%
  pivot_longer(is.numeric, names_to = "Trait", values_to = "Score") %>%
  group_by(popularity, Trait) %>%
  summarize(`Mean Score` = mean(Score), 
            `SD Score` = sd(Score), 
            `Median Score` = median(Score), 
            `Max Score` = max(Score), 
            `Min Score` = min(Score))

colors <- c("Unpopular" = "#E97451", "Popular" = "#8ABD91")
```

```{r}
#| label: lollipop-wrangling
#| echo: false
breed_traits <- breed_traits %>%
  mutate(breed = Breed) %>%
  select(-c(Breed))

#use column bind to combine breed traits and rank dataset
comb_df <-
  bind_cols(breed_traits, breed_rank_all) %>% select(-c(breed)) %>% relocate(Breed)

#create list of top 20 breeds
t20 <- breed_rank_all %>%
  tidyr::drop_na() %>%
  mutate(popsum = rowSums(across(where(is.numeric)), na.rm = TRUE)) %>%
  arrange(popsum) %>%
  head(20)
```

```{r}
#| label: lollipop-wrangling
#| echo: false
comb_df %>%
  #filter for only top 20 years
  filter(Breed %in% t20$Breed) %>%
  #pivot so year can be a column in the dataset used for the plot
  pivot_longer(
    cols = c(`2013 Rank`:`2020 Rank`),
    names_to = "Year",
    values_to = "rank"
  ) %>% mutate(Year = as.numeric(str_replace_all(Year, " Rank", "")), rank = as.numeric(rank))  %>%
  group_by(Breed) %>%
  #calculate range to feed to GGhighlight
  mutate(range = (max(rank) - min(rank)), .groups  = "drop") %>%
  ggplot(aes(x = Year, y = rank, color = Breed)) +
  scale_x_continuous(
    limits = c(2013, 2022),
    labels = c(2013:2022),
    breaks = c(2013:2022)
  ) +
  geom_line(show.legend = FALSE) +
  #label each line with breed name
  geom_dl(aes(label = Breed), method = list("last.points", cex = 0.65)) +
  theme_minimal() +
  #reverse y axis so that lower scores, which indicate higher popularity, will be on top
  scale_y_reverse() +
  gghighlight(
    max(range) > 6,
    use_direct_label = FALSE,
    unhighlighted_params = list(linewidth = 0.5, colour = alpha("slategray", 0.7))
  ) +
  labs(title = "Popularity Rankings of 20 Top Dog Breeds Over Time", x = "Year", y = "Rank") + # remove gridlines
  theme(panel.grid.minor = element_blank(),
        panel.grid.major = element_blank()) +
  scale_color_viridis_d()
```

```{r}
#| label: lollipop-wrangling
#| echo: false
comb_df %>%
  filter(!is.na(`2013 Rank`) & !is.na(`2020 Rank`)) %>%
  #create rankchange variable to determine differences between 2020 and 2013 rannks
  mutate(rankchange = `2013 Rank` - `2020 Rank`) %>%
  arrange(rankchange) %>%
  #add row number variable
  mutate(rnum = row_number()) %>%
  #create binary variables to designate top 10 and bottom 10 breeds in terms of popularity change
  mutate(bottom_10 = ifelse(rnum %in% seq (1, 10), 1, 0)) %>%
  mutate(top_10 = ifelse(rnum %in% seq(n() - 10 + 1, n()), 1, 0)) %>%
  select(-rnum) %>%
  #for this plot, filter for only breeds that increased and decreased the most in popularity
  filter(top_10 == 1 | bottom_10 == 1) %>%
  mutate(
    popchange = case_when(
      top_10 == 1 ~ "10 most increased in Popularity",
      bottom_10 == 1 ~ "10 most decreased in Popularity"
    )
  ) %>%
  ggplot() +
  geom_bar(aes(x = `Coat Type`, fill = `Coat Length`)) +
  facet_wrap( ~ popchange) +
  labs(title = "Coat Traits of Dog Breeds that Increased or Decreased in Popularity",
       subtitle = "From 2013 to 2020",
       y = "Count") +
  theme_minimal() +
  theme(axis.text.x = element_text(
    angle = 45,
    vjust = 1.2,
    hjust = 1 ), 
    panel.grid.minor.x = element_blank(), 
    panel.grid.minor.y = element_blank(),
    panel.grid.major.x = element_blank()) + 
  scale_fill_viridis_d(alpha = 0.9)
```

```{r}
#| label: plot-lollipop
#| echo: false
#| warning: false
#| fig-alt: |
#|   Differences in Breed Traits Between Popular and Unpopular Dogs



lollipop_data %>%
  pivot_wider(names_from = popularity, values_from = contains("Score")) %>%
  mutate(Trait = factor(Trait, levels = c("Trainability Level", "Playfulness Level", "Openness To Strangers", "Drooling Level", "Watchdog/Protective Nature", "Adaptability Level", "Mental Stimulation Needs", "Affectionate With Family", "Coat Grooming Frequency", "Good With Young Children", "Shedding Level", "Energy Level", "Good With Other Dogs", "Barking Level")), 
         Trait = fct_rev(Trait)) %>%
  ggplot(., mapping = aes(y = Trait)) +
  geom_segment(aes(x = `Mean Score_Unpopular`, xend = `Mean Score_Popular`, y = Trait, yend = Trait), color = "darkgrey") +
  geom_point(aes(x = `Mean Score_Unpopular`, y = Trait, color = "Unpopular")) +
  geom_point(aes(x = `Mean Score_Popular`, y = Trait, color = "Popular")) +
  scale_color_manual(values = colors) +
  labs(title = "Average Breed Trait Scores for Popular and Unpopular Dogs", 
       subtitle = "Based on 2020 Popularity Rankings", 
       y = "Breed Trait",
       x = "Average Score",
       color = "Popularity") +
  theme_minimal()
```

## Plot and text

::: columns
::: {.column width="50%"}
-   Some text
-   goes here
:::

::: {.column width="50%"}
```{r}
#| warning: false
#| out-width: "100%"
#| fig-width: 4
#| echo: false

# See how I changed out-width and fig-width from defaults
# to make the figure bigger

ggplot(penguins, aes(x = bill_length_mm, y = species, color = species)) +
  geom_boxplot() +
  theme_minimal()
```
:::
:::

# A new section...

## Tables

If you want to generate a table, make sure it is in the HTML format (instead of Markdown or other formats), e.g.,

```{r}
#| label: penguins-table

gt(head(penguins))
```

## Images

![Image credit: Danielle Navarro, Percolate.](images/watercolour_sys02_img34_teacup-ocean.png)

## Math Expressions {.smaller}

You can write LaTeX math expressions inside a pair of dollar signs, e.g. \$\alpha+\beta\$ renders $\alpha+\beta$. You can use the display style with double dollar signs:

    $$\bar{X}=\frac{1}{n}\sum_{i=1}^nX_i$$

$$\bar{X}=\frac{1}{n}\sum_{i=1}^nX_i$$

Limitations:

1.  The source code of a LaTeX math expression must be in one line, unless it is inside a pair of double dollar signs, in which case the starting `$$` must appear in the very beginning of a line, followed immediately by a non-space character, and the ending `$$` must be at the end of a line, led by a non-space character;

2.  There should not be spaces after the opening `$` or before the closing `$`.

# Wrap up

## Feeling adventurous?

-   You are welcomed to use the default styling of the slides. In fact, that's what I expect majority of you will do. You will differentiate yourself with the content of your presentation.

-   But some of you might want to play around with slide styling. Some solutions for this can be found at https://quarto.org/docs/presentations/revealjs.
